{"version":3,"sources":["node_modules/materialize-grid-list/js/materialize-grid-list.js"],"names":[],"mappingsfile":"materialize-grid-list.df01b783.map","sourceRoot":"..","sourcesContent":["/*!\n * Material Grid List v1.0\n * Author Ephenodrom\n * Licensed under MIT\n */\n(function($) {\n\n    var settings;\n    var cells = [];\n\n    // Functions\n    var methods = {\n        // Define the render function\n        render: function($elem, cells, columns) {\n            // Print the cells\n            var i = 1;\n            var x = columns;\n            $elem.removeClass(function(index, className) {\n                return (className.match(/(^|\\s)grid-list-\\S+/g) || []).join(' ');\n            });\n            $elem.addClass(\"grid-list-\" + x);\n            var rank = 1;\n            do {\n                // Grab x elements from the array\n                var begin = 0 + ((i - 1) * x);\n                var end = i * x;\n                var ar = cells.slice(begin, end);\n                var modulo = i % 2;\n\t\tif($elem.data(\"sorting\") == \"monodirectional\"){\n\t\t    modulo = 1;\n\t\t}\n                if (modulo != 0) {\n                    // Every uneven row we print from left to right\n                    ar.forEach(function(entry) {\n                        entry.removeClass(function(index, className) {\n                            return (className.match(/(^|\\s)cell-push\\S+/g) || []).join(' ');\n                        });\n                        entry.removeClass(function(index, className) {\n                            return (className.match(/(^|\\s)cell-1\\S+/g) || []).join(' ');\n                        });\n                        entry.data(\"grid-rank\", rank);\n                        rank++;\n                        $elem.append(entry);\n                    });\n                } else {\n                    // Every even row we print from right to left\n                    ar.forEach(function(entry) {\n                        entry.data(\"grid-rank\", rank);\n                        rank++;\n                    });\n                    ar.reverse();\n                    ar.forEach(function(entry) {\n                        entry.removeClass(function(index, className) {\n                            return (className.match(/(^|\\s)cell-push\\S+/g) || []).join(' ');\n                        });\n                        entry.removeClass(function(index, className) {\n                            return (className.match(/(^|\\s)cell-1\\S+/g) || []).join(' ');\n                        });\n                        if (ar.length < x) {\n                            // Cell count in the row is shorter than max cells in row, so we push it\n                            var y = x - ar.length;\n                            entry.addClass(\"cell-push-\" + y + \"-\" + x);\n                        }\n                        $elem.append(entry);\n                    });\n                }\n                if (i * x > cells.length) {\n                    break;\n                }\n                i++;\n            } while (true);\n        },\n        update: function($elem, columns) {\n            // Collect each cell\n            cells = [];\n            $elem.children('.grid-cell').each(function() {\n                cells.push($(this));\n            });\n            // Sort the cells\n\t    cells.sort(methods.sort);\n            // Delete all current cells\n            $elem.empty();\n            // Render the cells\n            methods.render($elem, cells, columns);\n        },\n        sort: function(a,b) {\n\t    var one = parseInt(a.data(\"grid-rank\"));\n            var two = parseInt(b.data(\"grid-rank\"));\n\t    return one-two;\n        },\n        checkWidth: function() {\n            var $elem = $(\".grid-list\");\n            var currentWidth = parseFloat($elem.css('width'));\n            var columns = $elem.data(\"columns\");\n\t    var maxColumns = $elem.data(\"max-columns\");\n            var newColumns = (currentWidth - 1) / 163 | 0;\n\t    if(newColumns > maxColumns){\n\t\tnewColumns = maxColumns;\n\t    }\n            if (newColumns != columns && columns < 6) {\n                if (!(newColumns > 6 && columns == 5)) {\n                    if (newColumns > 5) {\n                        newColumns = 5;\n                    }\n                    // The row get smaller or bigger, so we have to reorder the list\n                    methods.update($elem, newColumns);\n                    $elem.data(\"columns\", newColumns);\n                }\n            }\n            setTimeout(methods.checkWidth, 500);\n        },\n\n    };\n\n    // Plugin definition.\n    $.fn.materialGrid = function(options) {\n\n        return this.each(function() {\n\n            // Default options\n            settings = $.extend(true, {\n                debug: true,\n                maxcolumns: 5,\n                sorting: \"bidirectional\",\n            }, options);\n\n            if (settings.debug == true) {\n                console.log(\"Materialize Grid List Activated\");\n            }\n            var $elem = $(this);\n            // Collect each cell\n            $elem.children('.grid-cell').each(function() {\n                cells.push($(this));\n            });\n            $elem.empty();\n            $elem.data(\"columns\", settings.maxcolumns);\n            $elem.data(\"max-columns\", settings.maxcolumns);\n\t    $elem.data(\"sorting\", settings.sorting);\n            methods.render($elem, cells, settings.maxcolumns);\n            methods.checkWidth();\n        });\n    };\n}(jQuery));\n"]}